function [xrvhist] = rvhistgen_sundman(mu, xrv0vec, thist, tol, K)
% Generates a time history of position, velocity using Universal Variables
% This function uses Universal Variables as described in Bate
% "Fundamentals of Astrodynamics", 1971 to compute a time history of
% position and velocity. The advantage of using this function over the
% keplerian elements or equinoctial elements is that Universal Variables
% are well behaved in both elliptical and hyperbolic orbits.
% 
% @arg
% mu      - double
%           2-body gravitational parameter
% xrv0vec - 6 x 1 double matrix
%           Inertial Frame position and velocity coordinates at Epoch
% thist   - N x 1 double matrix
%           Delta time values measured from Epoch
% tol     - double
%           Eccentricity tolerance to use series approximation to evaluate 
%           parabolic oribts.
% K       - int
%           Number of terms in series approximation for parabolic orbits
% 
% @return
% xrvhist - 6 x N double matrix
%           Time history of position and velocity [r1; r2; r3; v1; v2; v3]
% 
% @author: Matt Marti
% @date: 2019-03-27

% Input checking
if nargin < 5
    K = 16;
end
if nargin < 4
    tol = 1e-3;
end
assert(numel(K) == 1, 'Incorrect size of argument ''K''');
assert(numel(tol) == 1, 'Incorrect size of argument ''tol''');
assert(tol > 0, 'tol must be positive');
assert(size(xrv0vec,1) == 6 && size(xrv0vec,2) == 1, ...
    'Incorrect size of argument ''r0vec''');
assert(numel(mu) == 1, 'Incorrect size of argument ''mu''');
assert(size(thist,1) == 1, ...
    'argument ''thist'' is not either single column or single row vector');

% Magnitudes of inputs
r0vec = xrv0vec(1:3);
v0vec = xrv0vec(4:6);
r0 = norm(r0vec);
v0 = norm(v0vec);

% Orbit energy and angular momentum
hvec = cross(r0vec, v0vec);
h = norm(hvec);
oomu = 1/mu;
E = 0.5*v0^2 - r0*oomu;

% Compute inverse of semi-major axis
ooa = - 2*E/mu;

% Compute eccentricity
r0dotv0 = dot(r0vec,v0vec);
evec = ( (v0^2-mu/r0)*r0vec - r0dotv0*v0vec )*oomu;
e = norm(evec);

% Initial guess of x
if e <= 1 - tol % Elliptical orbit
    xhist = sqrt(mu)*thist*ooa; % Bate 4.5-10
elseif 1 + tol <= e % Hyperbolic orbit
    sqrtma = 1/sqrt(-ooa);
    numer_4511 = -2*mu*thist;
    denom_4511 = a*dot(r0vec,v0vec)+sign(thist)*sqrtma*sqrt(mu)*(1-r0*ooa);
    xhist = sign(thist).*sqrtma.*log(numer_4511./denom_4511); % Bate 4.5-11
else % Parabolic orbit
    xhist = 0; % ?
end

% Solve Universal Time of Flight Equation
maxiter = 100;
i = 0;
while i < 100
    
    xsqhist = xhist.^2;
    zhist = ooa*xsqhist; % 4.4-7
    
    % Variables
    [Chist] = C_func(zhist, e, tol, K); % Bate 4.4-10
    Shist = S_func(zhist, e, tol, K); % Bate 4.4-11
    dCdz = (0.5./zhist).*(1-zhist.*Shist - 2*Chist); % Bate 4.5-16
    dSdz = (0.5./zhist).*(Chist - 3.*Shist); % Bate 4.5-17
    
    % Time of flight
    sqrtoomu = sqrt(oomu);
    ti = r0dotv0*oomu*xsqhist.*Chist ...
        + (1-r0*ooa).*xsqhist.*xhist.*Shist.*sqrtoomu ...
        + r0.*xhist.*sqrtoomu; % 4.4-14
    
    % Derivative of time of flight
    dtidx = xsqhist.*Chist.*sqrtoomu ...
        + r0dotv0.*oomu.*xhist.*(1-zhist.*Shist) ...
        + r0.*(1-zhist.*Chist); % 4.4-17
    
    
    
    i = i + 1;
end




% Evaluate f and g
xsqhist = xhist.^2;
fhist = 1 - xsqhist.*Chist/r0; % Bate 4.4-31
ghist = thist - xsqhist.*xhist.*Shist/sqrt(mu); % Bate 4.4-34

% Compute r
rvechist = fhist.*r0vec + ghist.*v0vec;
rhist = sqrt(sum(rvechist.^2, 1));

% Evaluate fdot and gdot
fdothist = 1 - xsqhist.*Chist./rhist; % Bate 4.4-35
gdothist = sqrt(mu)./(r0.*rhist).*xhist.*(zhist.*Shist - 1); % Bate 4.4-36

% Compute v
vhist = fdothist.*r0vec + gdothist.*v0vec;

% Assemble output
xrvhist = [rhist; vhist];

end

function [Chist] = C_func(zhist, e, tol, K) % 4.4-10
if e <= 1 - tol % Elliptical orbit
    Chist = (1 - cos(sqrt(zhist))) ./ zhist;
elseif 1 + tol <= e % Hyperbolic orbit
    Chist = (1 - cosh(sqrt(-zhist))) ./ zhist;
else % Parabolic orbit
    Chist = 0;
    for k = 0:K
        Chist = Chist + (-zhist).^k ./ factorial(2*k+2);
    end
end
end

function Shist = S_func(zhist, e, tol, K) % Bate 4.4-11
if e <= 1 - tol % Elliptical orbit
    sqrtzhist = sqrt(z);
    Shist = (sqrtzhist - sin(sqrtzhist))./(sqrtzhist.^3);
elseif 1 + tol <= e % Hyperbolic orbit
    sqrtmzhist = sqrt(-z);
    Shist = (sinh(sqrtmzhist) - sqrtmzhist)./(sqrtmzhist.^3);
else % Parabolic orbit
    Shist = 0;
    for k = 0:K
        Shist = Shist + (-zhist).^k ./ factorial(2*k+3);
    end
end
end