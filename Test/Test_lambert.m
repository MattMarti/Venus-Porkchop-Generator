%% Test_lambert% % Test cases for the Lambert Algorithm presented in Arora and Russel "A % Fast and Robust Multiple Revolution Lambert Algorithm Using a Cosine% Tranformation"% % Test case data from NASA JPL Horizons%       https://ssd.jpl.nasa.gov/horizons.cgi% and%       http://www.aerospacengineering.net/?p=1614% % @author: Matt Marti% @date: 2019-03-26clear% ConsantsMUEARTH = 398600.5e9; % [m^3/s^2] Earth Gravity constantdraw_plots_during_test = 1;%% Test 0% Example from Bates: counter-clockwise orbit (short way)% Giventof = 0.9667663;r1vec = [0.5; 0.6; 0.7]; % DUr2vec = [0.0; 1.0; 0.0]; % DUmu = 1; % AU^3/s^2% True values (long way)v1vec_true = [ -0.36167749; 0.76973587; -0.50634848 ];v2vec_true = [ -0.60187442; -0.02234181; -0.84262419 ];% Call Function[v1vec, v2vec] = lambert(mu, r1vec, r2vec, tof);% Assertionp = 1e-4;assert(max(abs(v1vec_true - v1vec)) < p, 'Bad value');assert(max(abs(v2vec_true - v2vec)) < p, 'Bad value');%% Test 1% Example from Bates: clockwise orbit (long way)% Giventof = 0.9667663;r1vec = [0.5; 0.6; 0.7]; % DUr2vec = [0.0; 1.0; 0.0]; % DUmu = 1; % AU^3/s^2% True values (long way)v1vec_true = [ -0.6304918096; -1.1139209665; -0.8826885334 ];v2vec_true = [ 0.1786653974; 1.5544139777; 0.2501315563 ];% Make sure that Bate has a sign error on the 3rd element of v2vec on p 239thist = [ 0:.01:tof, tof ];xrvtrue1 = rvhistgen_universal(mu, [r1vec; v1vec_true], thist(1), thist);% xrvtrue1end = rvhistgen_universal(mu, xrvtrue1(:,end), thist(end), thist);xrvtrue2 = rvhistgen_universal(mu, [r2vec; v2vec_true], thist(end), thist);% figure(1), plot(xrvtrue1')% figure(2), plot(xrvtrue2')% figure(3), plot(xrvtrue1' - xrvtrue2')assert(max(max(abs(xrvtrue1 - xrvtrue2))) < 5e-2, 'Book answer is wrong');% Call Function[v1vec, v2vec] = lambert(mu, r1vec, r2vec, tof, 0);% Assertionp = 1e-4;assert(max(abs(v1vec_true - v1vec)) < p, 'Bad value');assert(max(abs(v2vec_true - v2vec)) < p, 'Bad value');%% Test 2% Example from some website% Giventof = 207 * 3600*24;r1vec = [0.473265; -0.899215; 0]; % AUr2vec = [0.066842;  1.561256; 0.030948]; % AUmu = 3.964016e-14; % AU^3/s^2v1vec_true = [ 28996.2; 15232.7;  1289.2 ];v2vec_true = [-21147.0; 3994.5;  -663.3 ];% Call Function[v1vec, v2vec] = lambert(mu, r1vec, r2vec, tof);v1vec = v1vec*149.597870e9;v2vec = v2vec*149.597870e9;% Assertionp = 1e-1;for i = 1:3    assert(abs(v1vec_true(i) - v1vec(i)) < p, 'Bad value');    assert(abs(v2vec_true(i) - v2vec(i)) < p, 'Bad value');end% Display on plotif draw_plots_during_test    thist_trans = 0:24*3600:tof;    figure(1), hold off, plot(0,0);    plotorbit(mu, [r1vec; v1vec/149.597870e9], thist_trans, 1, [0,0,1]);end%% Test 3% Earth to Venus transfer orbit% Venus slightly ahead of Earth% Short transfer case% Usually works% Datat1 = 212444596800;t2 = 212455569600;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [ -95115290.8270729; ...       -51300108.8882472; ...        4736254.85162797; ...        16.7312947149885; ...       -30.7922748926794; ...       -1.38837841916347 ];mu = 132712440018;% Solutiondeltav_from_short = 9.22971435972143;deltav_to_short = 13.5898636020414;% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, v2] = lambert(mu, r1, r2, tof);% Assertionsassert(abs(norm(v1 - x1(4:6)) - deltav_from_short) < 1e-3, 'Bad v1');assert(abs(norm(v2 - x2(4:6)) - deltav_to_short) < 1e-3, 'Bad v2');% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-4, 'Bad Lambert solve');%% Test 4% Earth to Venus transfer orbit% Venus 225 degrees ahead of Earth% Long transfer case% Make sure doesn't break% Datat1 = 212444596800;t2 = 212461876800;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [  88225172.8216755; ...       -61430480.2164939; ...       -5984741.57543087; ...        19.8810821383247; ...        28.5235629307946; ...       -0.756139341675039 ];mu = 132712440018;% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, ~] = lambert(mu, r1, r2, tof);% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-4, 'Bad Lambert solve');%% Test 4% Earth to Venus transfer orbit% Venus 225 degrees ahead of Earth% Counter-clockwise case% Datat1 = 212444596800;t2 = 212461876800;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [  88225172.8216755; ...       -61430480.2164939; ...       -5984741.57543087; ...        19.8810821383247; ...        28.5235629307946; ...       -0.756139341675039 ];mu = 132712440018;% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, ~] = lambert(mu, r1, r2, tof, 0);% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-3, 'Bad Lambert solve');%% Test 5% Earth to Venus transfer orbit% Venus 225 degrees ahead of Earth% Long transfer case% Make sure doesn't break% Datat1 = 212444596800;t2 = 212461876800;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [  88225172.8216755; ...       -61430480.2164939; ...       -5984741.57543087; ...        19.8810821383247; ...        28.5235629307946; ...       -0.756139341675039 ];mu = 132712440018;% Note that the correct v1 should be about [-28.4; 0.4; 0]% Use: % hold off, plotorbit(mu, [x1(1:3); -27.9; -1.0; 0] , t1:24*3600:t2, 1, [1,0,0] ); plotorbit(mu, x1, t1:24*3600:t1+400*24*3600, 1, [0,0,1] ); plotorbit(mu, x2, t2:24*3600:t2+400*24*3600, 1, [1,0.5,0.5] );% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, ~] = lambert(mu, r1, r2, tof);% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-4, 'Bad Lambert solve');%% Test 6% Earth to Venus transfer orbit% Venus 178 degrees ahead of Earth% Short transfer case% Make sure doesn't break% Datat1 = 212444596800;t2 = 212459284800;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [ 13436858.421996; ...      -106816644.171782; ...      -2290985.11979151; ...       34.47205747715; ...       4.4451082242711; ...      -1.92859237476142 ];mu = 132712440018;% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, v2] = lambert(mu, r1, r2, tof);% Assertionassert(~sum(isnan(v1)), 'bad velocity')assert(~sum(isnan(v2)), 'bad velocity')% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-1, 'Bad Lambert solve');%% Test 7% Earth to Venus transfer orbit% Venus 180 degrees ahead of Earth% Short transfer case% Make doesn't break% Datat1 = 212444596800;t2 = 212459457600;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [ 19368728.7896743; ...      -105883139.173238; ...      -2620539.12438132; ...       34.1662808863502; ...       6.35638262248577; ...      -1.8847169265181 ];mu = 132712440018;% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, v2] = lambert(mu, r1, r2, tof);% Assertionassert(~sum(isnan(v1)), 'bad velocity')assert(~sum(isnan(v2)), 'bad velocity')% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-1, 'Bad Lambert solve');%% Test 8% Earth to Venus transfer orbit% Venus 180 degrees ahead of Earth% Short transfer case% Make sure equal to Homman Transfer if 2-D case% Datat1 = 212444596800;t2 = 212459457600;x1 = [ -25453237.0827383; ...        146091344.286811; ...        0; ...       -29.8633820023531; ...       -5.16582224670029; ...        0 ];x2 = [  19368728.7896743; ...       -105883139.173238; ...        0; ...        34.1662808863502; ...        6.35638262248577; ...        0 ];mu = 132712440018;% Solutiondeltav_from_short = 0; % TODOdeltav_to_short = 0; % TODO% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, v2] = lambert(mu, r1, r2, tof);% Assertionassert(~sum(isnan(v1)), 'bad velocity')assert(~sum(isnan(v2)), 'bad velocity')% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-2, 'Bad Lambert solve');%% Test 9% Earth to Venus transfer orbit% Venus 225 degrees ahead of Earth% Long transfer case% Make sure doesn't break% Datat1 = 212444596800;t2 = 212461876800;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [  88225172.8216755; ...       -61430480.2164939; ...       -5984741.57543087; ...        19.8810821383247; ...        28.5235629307946; ...       -0.756139341675039 ];mu = 132712440018;% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, v2] = lambert(mu, r1, r2, tof);% Assertionassert(~sum(isnan(v1)), 'bad velocity')assert(~sum(isnan(v2)), 'bad velocity')% Plot orbit dataplottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-4, 'Bad Lambert solve');%% Test 10% Earth to Venus transfer orbit% Venus 178 degrees ahead of Earth% Long transfer case% Make sure doesn't break% Datat1 = 212444596800;t2 = 212459284800;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [  13436858.421996; ...       -106816644.171782; ...       -2290985.11979151; ...        34.47205747715; ...        4.4451082242711; ...       -1.92859237476142 ];mu = 132712440018;% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;% Run lambert[v1, v2] = lambert(mu, r1, r2, tof);% Assertionassert(~sum(isnan(v1)), 'bad velocity')assert(~sum(isnan(v2)), 'bad velocity')% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-1, 'Bad Lambert solve');%% Test 11% Earth to Venus transfer orbit% Venus 5 degrees ahead of Earth% Short transfer case, hyperbolic orbit% Make sure doesn't break% Datat1 = 212444596800;t2 = 212450040000;x1 = [ -25453237.0827383; ...        146091344.286811; ...       -2726.52790376544; ...       -29.8633820023531; ...       -5.16582224670029; ...        0.00113552686025775 ];x2 = [ -29009686.8928911; ...        104790872.334466; ...        3065270.38126867; ...       -33.9125780176868; ...       -9.43799203793275; ...        1.82712547386842 ];mu = 132712440018;% Compile input datamu = mu; %#okr1 = x1(1:3);r2 = x2(1:3);tof = t2 - t1;longwayflag = 0;hyperflag = 0;plotflag = 0;% Run lambert[v1, v2] = lambert(mu, r1, r2, tof);% Assertionassert(~sum(isnan(v1)), 'bad velocity')assert(~sum(isnan(v2)), 'bad velocity')% Plot orbit dataif draw_plots_during_test    plottransferorbit( mu, x1, t1, x2, t2, v1, 1, 1 );end% Propagate orbit and make sure end location is same as x2(1:3)xrv = rvhistgen_universal(mu, [x1(1:3); v1], t1, t2);assert(max(abs(xrv(1:3) - x2(1:3))) < 1e-4, 'Bad Lambert solve');%% Outputfprintf('PASSED: Test_lambert\n');