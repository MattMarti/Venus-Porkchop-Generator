%% Test_lambert2% % Test cases for the Superior Lambert Algorithm from the paper by% DerAstrodynamics% % @author: Matt Marti% @date: 2019-03-25clear% ConsantsMUEARTH = 398600.5e9; % [m^3/s^2] Earth Gravity constant%% Test 1, N = 0, x < 0 high, sigma = 0.5% Giventof = 36000; % [s] Time of flightr1vec = 1e3*[22592.145603; -1599.915239; -19783.950506]; % [m]r2vec = 1e3*[1922.067697; 4054.157051; -8925.727465]; % [m]% Truth valuesv1vec_t = 1e3*[2.000652697; 0.387688615; -2.666947760]; % [m/s]v2vec_t = 1e3*[-3.79246619; -1.77707641; 6.856814395]; % [m/s]% Initial guessdirecttorbit = 1;x1 = -0.5; % Path Parameter set to high (x < 0)N = 0; % No extra rotations% Run function[v1vec, v2vec] = lambert2(MUEARTH, r1vec, r2vec, tof, directtorbit, N, x1);% Test caseassert(norm(v1vec - v1vec_t) < 1e-9, 'Bad velocity 1');assert(norm(v2vec - v2vec_t) < 1e-9, 'Bad velocity 2');%% Test 2, N = 1, x < 0 high, sigma = 0.5% Giventof = 36000; % [s] Time of flightr1vec = 1e3*[22592.145603; -1599.915239; -19783.950506]; % [m]r2vec = 1e3*[1922.067697; 4054.157051; -8925.727465]; % [m]% Truth valuesv1vec_t = 1e3*[0.50335770; 0.61869408; -1.57176904]; % [m/s]v2vec_t = 1e3*[-4.18334626; -1.1326727; 6.13307091]; % [m/s]% Initial guessdirecttorbit = 1;x1 = -0.31116; % Path Parameter set to high (x < 0)N = 1; % No extra rotations% Run function[v1vec, v2vec] = lambert2(MUEARTH, r1vec, r2vec, tof, directtorbit, N, x1);% Test caseassert(norm(v1vec - v1vec_t) < 1e-9, 'Bad velocity 1');assert(norm(v2vec - v2vec_t) < 1e-9, 'Bad velocity 2');%% Test 3, N = 1, x > 0 low, sigma = 0.5% Giventof = 36000; % [s] Time of flightr1vec = 1e3*[22592.145603; -1599.915239; -19783.950506]; % [m]r2vec = 1e3*[1922.067697; 4054.157051; -8925.727465]; % [m]% Truth valuesv1vec_t = 1e3*[-2.45759553; 1.16945801; 0.43161258]; % [m/s]v2vec_t = 1e3*[-5.53841370; 0.01822220; 5.49641054]; % [m/s]% Initial guessdirecttorbit = 1;x1 = 0.44791; % Path Parameter set to low (x > 0)N = 1; % No extra rotations% Run function[v1vec, v2vec] = lambert2(MUEARTH, r1vec, r2vec, tof, directtorbit, N, x1);% Test caseassert(norm(v1vec - v1vec_t) < 1e-9, 'Bad velocity 1');assert(norm(v2vec - v2vec_t) < 1e-9, 'Bad velocity 2');%% Test 4, N = 0, x < 0 high, sigma = - 0.5% Giventof = 36000; % [s] Time of flightr1vec = 1e3*[22592.145603; -1599.915239; -19783.950506]; % [m]r2vec = 1e3*[1922.067697; 4054.157051; -8925.727465]; % [m]% Truth valuesv1vec_t = 1e3*[2.96616042; -1.27577231; -0.75545632]; % [m/s]v2vec_t = 1e3*[5.84375455; -0.20047673; -5.48615883]; % [m/s]% Initial guessdirecttorbit = 0;x1 = - 0.5; % Path Parameter set to low (x > 0)N = 0; % No extra rotations% Run function[v1vec, v2vec] = lambert2(MUEARTH, r1vec, r2vec, tof, directtorbit, N, x1);% Test caseassert(norm(v1vec - v1vec_t) < 1e-9, 'Bad velocity 1');assert(norm(v2vec - v2vec_t) < 1e-9, 'Bad velocity 2');%% Test 5, N = 1, x < 0 high, sigma = - 0.5% Giventof = 36000; % [s] Time of flightr1vec = 1e3*[22592.145603; -1599.915239; -19783.950506]; % [m]r2vec = 1e3*[1922.067697; 4054.157051; -8925.727465]; % [m]% Truth valuesv1vec_t = 1e3*[1.33645655; -0.94654565; 0.30211211]; % [m/s]v2vec_t = 1e3*[4.93628678; 0.39863416; -5.61593092]; % [m/s]% Initial guessdirecttorbit = 0;x1 = - 0.30678; % Path Parameter set to low (x > 0)N = 1; % No extra rotations% Run function[v1vec, v2vec] = lambert2(MUEARTH, r1vec, r2vec, tof, directtorbit, N, x1);% Test caseassert(norm(v1vec - v1vec_t) < 1e-9, 'Bad velocity 1');assert(norm(v2vec - v2vec_t) < 1e-9, 'Bad velocity 2');%% Test 6, N = 1, x > 0 low, sigma = - 0.5% Giventof = 36000; % [s] Time of flightr1vec = 1e3*[22592.145603; -1599.915239; -19783.950506]; % [m]r2vec = 1e3*[1922.067697; 4054.157051; -8925.727465]; % [m]% Truth valuesv1vec_t = 1e3*[-1.38861608; -0.47836611; 2.21280154]; % [m/s]v2vec_t = 1e3*[3.92901545; 1.50871943; -6.52926969]; % [m/s]% Initial guesssigma = - 0.5;directtorbit = 0;x1 = 0.44808; % Path Parameter set to low (x > 0)N = 1; % No extra rotations% Run function[v1vec, v2vec] = lambert2(MUEARTH, r1vec, r2vec, tof, directtorbit, N, x1);% Test caseassert(norm(v1vec - v1vec_t) < 1e-9, 'Bad velocity 1');assert(norm(v2vec - v2vec_t) < 1e-9, 'Bad velocity 2');%% Outputfprintf('PASSED: Test_lambert2\n');